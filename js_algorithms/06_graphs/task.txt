Задание
Управление зависимостями это очень важная задача при разработке программного обеспечения. Обычно в приложениях задействовано множество сторонних компонентов, которые в свою очередь тоже могут полагаться на сторонние компоненты. Одной из задач менеджера зависимостей является подключение зависимостей в правильном порядке. Библиотеки от которых зависят другие, должны подключаться раньше. Определение этой последовательности сводится к задаче сортировки графа.

solution.js
Реализуйте и экспортируйте функцию sortGraph, которая принимает на вход граф и возвращает список узлов отсортированных при помощи топологической сортировки. Подробно об алгоритме.
https://ru.wikipedia.org/wiki/%D0%A2%D0%BE%D0%BF%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0

Пример:

import { sortGraph } from "./solution";

const graph = {
    'mongo': [],
    'tzinfo': ['thread_safe'],
    'uglifier': ['execjs'],
    'execjs': ['thread_safe', 'json'],
    'redis': []
};

['mongo', 'thread_safe', 'tzinfo', 'json', 'execjs', 'uglifier', 'redis'] == sortGraph(graph);
Независимые библиотеки и цепочки библиотек должны появляться в том порядке в котором они были в исходном массиве.

67% пользователей решило эту задачу самостоятельно